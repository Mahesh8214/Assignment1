Q1 What is multithreading in python? Why is it used? Name the module used to handle threads in python
Ans:
    Multithreading is the ability of a processor to execute multiple threads concurrently, where a thread is a unit of execution within a process.
    Multithreading is a way of achieving multitasking, and it allows a CPU to execute many tasks of one process at the same time.
    Multithreading is used to improve the performance of a program by allowing it to execute multiple tasks simultaneously.
    The threading module is used to handle threads in Python

_________________________________________________________________________________________________________________________________

Q2 Why threading module used? rite the use of the following functions
( activeCount
 currentThread
 enumerate)
Ans:
    The threading module is used in Python to create, control, and manage threads in a program. It provides a simple and intuitive API for spawning multiple threads in a program. The following functions are provided by the threading module to manage threads:
    activeCount(): This function returns the number of Thread objects currently alive in the program
    currentThread(): This function returns the current Thread object, corresponding to the caller's thread of control. If the caller's thread of control was not created through the threading module, then a dummy thread object with limited functionality is returned
    enumerate(): This function returns a list of all Thread objects that are currently alive in the program
_________________________________________________________________________________________________________________________________

Q3. Explain the following functions
( run
 start
 join
' isAlive)
Ans:
run(): This method is called when a thread is started using the start() method. It contains the code that will be executed in the thread
     import threading
    def my_function():
        # code to be executed in the new thread
        pass    
    # create a new thread
    my_thread = threading.Thread(target=my_function)
    
    # start the thread
    my_thread.start()

start(): This method is used to start the execution of a thread. It creates a new thread of control and calls the run() method on the thread object

    def my_function():
        # code to be executed in the new thread
        pass
    
    # create a new thread
    my_thread = threading.Thread(target=my_function)
    
    # start the thread
    my_thread.start()

join(): This method is used to wait for a thread to complete its execution. It blocks the calling thread until the thread being joined completes its execution

    def my_function():
        # code to be executed in the new thread
        pass
    
    # create a new thread
    my_thread = threading.Thread(target=my_function)
    
    # start the thread
    my_thread.start()
    
    # wait for the thread to complete
    my_thread.join()

_________________________________________________________________________________________________________________________________

Q4. Write a python program to create two threads. Thread one must print the list of squares and thread
two must print the list of cubes
Ans:
      import threading
      def print_squares():
          for i in range(1, 11):
              print(f"{i} squared is {i**2}")
      
      def print_cubes():
          for i in range(1, 11):
              print(f"{i} cubed is {i**3}")
      
      # create two threads
      thread1 = threading.Thread(target=print_squares)
      thread2 = threading.Thread(target=print_cubes)
      
      # start the threads
      thread1.start()
      thread2.start()
      
      # wait for the threads to complete
      thread1.join()
      thread2.join()
_________________________________________________________________________________________________________________________________

Q5. State advantages and disadvantages of multithreading
Ans:
    Advantages of multithreading:
        Enhanced performance by decreased development time
        Simplified and streamlined program coding
        Improvised GUI responsiveness
        Simultaneous and parallelized occurrence of tasks
        Better use of cache storage by utilization of resources
        Decreased cost of maintenance
        Better use of CPU resource
        Simplified modeling
        Parallelism

    Disadvantages of multithreading:
        Increased complexity
        Increased memory usage
        Safety issues
        Liveness issues
        Limited by hardware
        Processor utilization is inferior
        Needs more careful synchronization
        Can consume a large space of stocks of blocked threads
        Needs support for thread
_________________________________________________________________________________________________________________________________

Q6. Explain deadlocks and race conditions.
Ans:
    Deadlocks: A deadlock occurs when two or more threads are blocked, waiting for each other to release a resource that they need to proceed. 
    This can happen when two threads each hold a resource that the other thread needs, or when two threads are waiting for a resource that is held 
    by a third thread. Deadlocks can cause the entire system to come to a halt, as the threads involved in the deadlock are unable to proceed

    Race conditions: A race condition occurs when two or more threads access a shared resource at the same time, and the outcome of the program 
    depends on the order in which the threads execute. This can result in unpredictable behavior, as the outcome of the program can vary depending
    on the timing of the threads. Race conditions can cause data corruption, as two threads may attempt to modify the same data at the same time, 
    resulting in inconsistent or incorrect results

_________________________________________________________________________________________________________________________________
